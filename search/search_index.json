{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Python Project Generation Tool","text":"<p>This is a command line tool to help you create new Python projects.  It will create a new directory for your project, initialise a git repository, create a virtual environment, and install some basic dependencies.</p> <p>Latest Version : v0.3.0</p>"},{"location":"#testing","title":"Testing","text":"<p>The generated project includes pytest and some related plugins to allow you to set up testing straight away.</p> <p>Write your tests in the <code>tests</code> directory and run them with <code>pytest</code>.</p>"},{"location":"#linting","title":"Linting","text":"<p>The generated project includes flake8 (with several plugins) for linting and Black for formatting. Mypy is installed for type checking. isort, Pylint and tyrceratops are also installed as standard.</p>"},{"location":"#pre-commit","title":"Pre-commit","text":"<p>The generated project uses pre-commit to run some checks on the code before it is committed.  This is a great tool to help keep your code clean.</p> <p>To install pre-commit, run the following command from inside your venv:</p> <pre><code>$ pre-commit install\npre-commit installed at .git/hooks/pre-commit\n</code></pre>"},{"location":"configuration/","title":"Configuration","text":""},{"location":"configuration/#configuration-file","title":"Configuration file","text":"<p>This app needs minimal configuration, currently just storing defaults for the <code>author_name</code>, <code>author_email</code> and <code>default_license</code>. This is stored in a configuration file in a sub-folder of the user's home directory. By default (and currently the only option) this file is stored in <code>~/.pymaker/config.toml</code>. An example of this file is:</p> <pre><code>[pymaker]\nauthor_email = \"user@server.com\"\nauthor_name = \"Python User\"\ndefault_license = \"MIT\"\nschema_version = \"1.0\" # for internal use, generally don't change this\n</code></pre> <p>If this file does not exist, it will be created on first run. The app will ask for the values of these fields. For <code>author_name</code> and <code>author_email</code> it will try to use the current git user name and email if they are set as defaults, though the user can override these.</p>"},{"location":"configuration/#view-configuration","title":"View configuration","text":"<p>You can list the current configuration with the command:</p> <pre><code>$ pymaker config show\n</code></pre>"},{"location":"configuration/#set-configuration","title":"Set configuration","text":"<p>The configuration is set the first time you run the app, but you can change these defaults at any time using the command:</p> <pre><code>$ pymaker config change\n</code></pre> <p>The latter command will prompt you for the values of the fields, and then update the configuration file.</p>"},{"location":"installation/","title":"Installation","text":"<p>It is probably better to install this package globally, rather than in a virtual environment, as it is intended to be used to create new projects. Since we are using Poetry to manage the dependencies, a virtual environment will be created for you anyway specific to each project you are creating.</p> <p>Install the package globally using pip:</p> <pre><code>$ pip install pyproject-maker\n</code></pre> <p>If you cannot install globally due to permissions, you can install it to your user install directory:</p> <pre><code>$ pip install --user pyproject-maker\n</code></pre> <p>or use pipx</p> <pre><code>$ pipx install pyproject-maker\n</code></pre>"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2023 Grant Ramsay</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"quick-start/","title":"Quick Start","text":""},{"location":"quick-start/#create-a-new-project","title":"Create a new project","text":"<p>To create a new project, run the following command:</p> <pre><code>$ pymaker new &lt;project-folder&gt;\n</code></pre> <p>This will create a new directory with the name you provide.</p> <p>You can create a new project in the current directory by using <code>.</code> as the project folder name. This must be an empty directory:</p> <pre><code>$ mkdir test-project\n$ cd test-project\n$ pymaker new .\n</code></pre> <p>The App will then run the steps needed to get you started quickly:</p> <ol> <li>Copy the template files into the new directory</li> <li>Initialise a git repository</li> <li>Commit the boilerplate to Git</li> </ol> <p>You will be asked a series of questions to customise the new project.</p>"},{"location":"quick-start/#choose-a-package-name-and-description","title":"Choose a package name and description","text":"<p>When it asks \"Package Name?\" you can choose two variants :</p> <ol> <li>If you are creating a standard Python package that can optionally be    uploaded to PyPI, enter a package name here. Note that underscores (\"_\")    must be used as opposed to dashes (\"-\") to comply with Python package naming    rules. Default is the project folder name with underscores replacing dashes.</li> <li>For a stand-alone tool that will not ne uploaded to PyPI, or is not a    library, enter '-' for the package name. In this case the <code>main.py</code> will just    be placed in the project root and no package folder will be created or    referenced.</li> </ol>"},{"location":"quick-start/#start-developing","title":"Start developing","text":"<p>You should now change into the new directory, install dependencies and activate the virtual environment:</p> <pre><code>$ cd &lt;project-folder&gt;\n$ poetry install\n$ poetry shell\n</code></pre> <p>Now, you can start developing </p>"},{"location":"quick-start/#example-run","title":"Example run","text":"<pre><code>$ pymaker new test-project\nPyMaker - Generate a Python project skeleton.\n\nCreating a new project at /home/bathroom/test-project\n\nName of the Application? (Test Project):\nPackage Name? (Use '-' for standalone script) (test_project):\nDescription of the Application?: An amazing Bigly test project. better than you've ever seen before!\nAuthor Name? (Orange Tango):\nAuthor Email? (bigly@spraytan.org):\nApplication License? [None/Apache2/BSD3/BSD2/GPL2/GPL3/LGPL/MIT/MPL2/CDDL/EPL2] (MIT):\n\nCreating a New Python app with the below settings :\n\n    Description : An amazing Bigly test project. better than you've ever seen before!\n   Package Name : test_project\n         Author : Orange Tango\n          Email : bigly@spraytan.org\n        License : MIT\n    Project Dir : /home/bathroom/test-project\n           Name : Test Project\n\nIs this correct? [y/n] (y): y\n\n--&gt; Creating project folder ... Done\n--&gt; Creating Git repository ... Done\n\n--&gt; Project created successfully.\n\nNext steps:\n\n    1) Change to the project directory:\n    2) Install the dependencies (creates a virtual environment):\n        'poetry install'\n    3) Activate the virtual environment:\n        'poetry shell'\n    4) Run the application:\n        'test-project'\n    5) Code!\n\nSee the README.md file for more information.\n</code></pre>"},{"location":"tasks/","title":"Task Runner","text":"<p>The task-runner Poe the Poet is installed in the new project as a development dependency which allows us to run simple tasks (similar to npm <code>scripts</code>).</p> <p>These are run (from within the virtual environment) using the <code>poe</code> command and then the script name, for example:</p> <pre><code>$ poe pre\n</code></pre> <p>You can define your own, but there are 7 specific ones provided with the script.</p> <ul> <li><code>pre</code> : Run <code>pre-commit run --all-files</code></li> <li><code>pylint</code>: Run Pylint on all Python files in the project.</li> <li><code>mypy</code> = Run MyPy type-checker on all Python files in the project.</li> <li><code>flake8</code> = Run Flake8 linter on all Python files in the project.</li> <li><code>black</code> = Run Black code formatter on all Python files in the project.</li> <li> <p><code>try</code> = Run Tryceratops linter on all Python files in the project.</p> </li> <li> <p><code>lint</code> = Runs pylint, mypy, flake8 and black in sequence</p> </li> </ul> <p>These are defined in the <code>pyproject.toml</code> file in the <code>[tool.poe.tasks]</code> section. Take a look at this file if you want to add or remove tasks.</p>"}]}