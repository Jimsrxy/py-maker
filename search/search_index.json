{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Python Project Generation Tool","text":"<p>A fully customizable Python application to bootstrap Poetry-based boilerplate for you to start developing your Python applications quicker! Includes linting and Pytest libraries.</p> <p>It will create a new directory for your project (or use the current directory), initialise a git repository, create a virtual environment, and install some basic dependencies for Testing, Linting and more.</p> <p>Latest Version : v0.7.0</p>"},{"location":"#testing","title":"Testing","text":"<p>The generated project includes pytest and some related plugins to allow you to set up testing straight away.</p> <p>Write your tests in the <code>tests</code> directory and run them with <code>pytest</code>.</p>"},{"location":"#linting","title":"Linting","text":"<p>The generated project includes flake8 (with several plugins) for linting and Black for formatting. Mypy is installed for type checking. isort, Pylint and tyrceratops are also installed as standard.</p>"},{"location":"#customize-the-generated-project","title":"Customize the generated project","text":"<p>You can add extra or edited files to the generated project by adding them to the <code>~/.pymaker/template</code> directory.  The files in this directory will be copied into the generated project, overwriting any existing files with the same name.</p> <p>It is also possible to dump the whole template into this folder or the current folder so full customization and even removal of files is possible.</p>"},{"location":"#pre-commit","title":"Pre-commit","text":"<p>The generated project uses pre-commit to run some checks on the code before it is committed.  This is a great tool to help keep your code clean.</p> <p>To install pre-commit, run the following command from inside your venv:</p> <pre><code>$ pre-commit install\npre-commit installed at .git/hooks/pre-commit\n</code></pre>"},{"location":"#github-actions-and-configuration","title":"GitHub Actions and Configuration","text":"<p>By default the generated project includes a GitHub Actions workflow to run Dependabot to keep your dependencies up to date. There are also standard templates for Pull Request and Issues.</p> <p>The plan is to add more workflows in the future, for example running tests and more.</p>"},{"location":"#community-related-files","title":"Community related files","text":"<p>To aid in community building, the generated project includes a <code>CODE_OF_CONDUCT.md</code> file.  This is based on the Contributor Covenant standard.</p> <p>Future releases will include other Community related files (for example an <code>AUTHORS</code> and <code>CONTRIBUTING</code> file.).</p>"},{"location":"#contributing-to-this-project","title":"Contributing to this Project","text":"<p>For information on how to contribute to the project, see the <code>CONTRIBUTING.md</code> file in the root of the repository or on this website</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#changelog","title":"Changelog","text":""},{"location":"changelog/#unreleased","title":"Unreleased","text":"<p>Full Changelog</p> <p>Dependency Updates:</p> <ul> <li>build(deps): bump rich from 13.5.3 to 13.6.0 #128 (dependabot[bot])</li> <li>build(deps-dev): bump pylint from 2.17.6 to 2.17.7 #127 (dependabot[bot])</li> <li>build(deps-dev): bump types-requests from 2.31.0.6 to 2.31.0.7 #126 (dependabot[bot])</li> <li>build(deps-dev): bump poethepoet from 0.23.0 to 0.24.0 #125 (dependabot[bot])</li> </ul> <p>Merged pull requests:</p> <ul> <li>migrate tomli lib to rtoml #131 (seapagan)</li> <li>Add help to poe tasks #130 (seapagan)</li> </ul>"},{"location":"changelog/#v070-2023-10-01","title":"v0.7.0 (2023-10-01)","text":"<p>Full Changelog</p> <p>Implemented enhancements:</p> <ul> <li>implement 'config edit' command #124 (seapagan)</li> <li>add '--bare' option #123 (seapagan)</li> <li>Add '--standalone' CLI flag #113 (seapagan)</li> <li>add optional  github_token setting #106 (seapagan)</li> <li>store and use GitHub username #104 (seapagan)</li> </ul> <p>Documentation:</p> <ul> <li>Adjust and clarify some docs #114 (seapagan)</li> <li>Add a contributing guide #109 (seapagan)</li> <li>Add a POE Task to automatically create and update the CHANGELOG.md #107 (seapagan)</li> <li>Add MkDocs Tasks to the Documentation #105 (seapagan)</li> </ul> <p>Dependency Updates:</p> <ul> <li>build(deps): bump pydantic from 2.3.0 to 2.4.2 #122 (dependabot[bot])</li> <li>build(deps-dev): bump types-requests from 2.31.0.4 to 2.31.0.6 #120 (dependabot[bot])</li> <li>build(deps-dev): bump pylint from 2.17.5 to 2.17.6 #119 (dependabot[bot])</li> <li>build(deps-dev): bump types-requests from 2.31.0.3 to 2.31.0.4 #112 (dependabot[bot])</li> <li>build(deps-dev): bump mkdocs-material from 9.4.0 to 9.4.2 #111 (dependabot[bot])</li> <li>build(deps-dev): bump poethepoet from 0.22.1 to 0.23.0 #110 (dependabot[bot])</li> </ul> <p>Merged pull requests:</p> <ul> <li>improve typing across the package #115 (seapagan)</li> <li>adjust suggested git repo name #103 (seapagan)</li> </ul>"},{"location":"changelog/#v062-2023-09-24","title":"v0.6.2 (2023-09-24)","text":"<p>Full Changelog</p> <p>Fixed bugs:</p> <ul> <li>--version flag does not work. #101</li> </ul> <p>Merged pull requests:</p> <ul> <li>Fix #101 (--version flag does not work) #102 (seapagan)</li> </ul>"},{"location":"changelog/#v061-2023-09-23","title":"v0.6.1 (2023-09-23)","text":"<p>Full Changelog</p> <p>Fixed bugs:</p> <ul> <li>fix typos and wording in the generated readme #98 (seapagan)</li> </ul> <p>Documentation:</p> <ul> <li>Remove dependency spam from changelog #97 (seapagan)</li> </ul> <p>Dependency Updates:</p> <ul> <li>build(deps): bump gitpython from 3.1.36 to 3.1.37 #96 (dependabot[bot])</li> <li>build(deps-dev): bump mkdocs-material from 9.3.2 to 9.4.0 #95 (dependabot[bot])</li> <li>build(deps-dev): bump types-requests from 2.31.0.2 to 2.31.0.3 #94 (dependabot[bot])</li> <li>build(deps-dev): bump faker from 19.6.1 to 19.6.2 #93 (dependabot[bot])</li> <li>build(deps-dev): bump mkdocs from 1.5.2 to 1.5.3 #92 (dependabot[bot])</li> <li>build(deps-dev): bump mkdocs-material from 9.3.1 to 9.3.2 #91 (dependabot[bot])</li> <li>build(deps): bump rich from 13.5.2 to 13.5.3 #90 (dependabot[bot])</li> </ul> <p>Merged pull requests:</p> <ul> <li>add poe tasks for documentation if mkdocs enabled #100 (seapagan)</li> <li>update tool versions in both pre-commit configs #99 (seapagan)</li> </ul>"},{"location":"changelog/#v060-2023-09-14","title":"v0.6.0 (2023-09-14)","text":"<p>Full Changelog</p> <p>Implemented enhancements:</p> <ul> <li>Auto install and update 'pre commit' #88 (seapagan)</li> <li>add code of conduct to project and the template #87 (seapagan)</li> <li>Add Github templates to the default output template #86 (seapagan)</li> </ul> <p>Dependency Updates:</p> <ul> <li>build(deps): bump actions/stale from 5 to 8 #89 (dependabot[bot])</li> </ul>"},{"location":"changelog/#v051-2023-09-12","title":"v0.5.1 (2023-09-12)","text":"<p>Full Changelog</p> <p>Implemented enhancements:</p> <ul> <li>add --version command to CLI #63 (seapagan)</li> </ul> <p>Fixed bugs:</p> <ul> <li>add missing 'requests' library to pyproject.toml #82 (seapagan)</li> </ul> <p>Dependency Updates:</p> <ul> <li>Bump faker from 19.6.0 to 19.6.1 #85 (dependabot[bot])</li> <li>Bump gitpython from 3.1.35 to 3.1.36 #84 (dependabot[bot])</li> <li>Bump mkdocs-material from 9.2.8 to 9.3.1 #83 (dependabot[bot])</li> <li>Bump pymarkdownlnt from 0.9.13.3 to 0.9.13.4 #80 (dependabot[bot])</li> <li>Bump faker from 19.3.1 to 19.6.0 #79 (dependabot[bot])</li> <li>Bump black from 23.7.0 to 23.9.1 #78 (dependabot[bot])</li> <li>Bump pytest from 7.4.0 to 7.4.2 #77 (dependabot[bot])</li> <li>Bump gitpython from 3.1.33 to 3.1.35 #76 (dependabot[bot])</li> <li>Bump pymarkdownlnt from 0.9.13 to 0.9.13.3 #74 (dependabot[bot])</li> <li>Bump mkdocs-material from 9.2.7 to 9.2.8 #73 (dependabot[bot])</li> <li>Bump mkdocstrings from 0.22.0 to 0.23.0 #72 (dependabot[bot])</li> <li>Bump actions/checkout from 3 to 4 #70 (dependabot[bot])</li> <li>Bump mkdocs-material from 9.2.6 to 9.2.7 #68 (dependabot[bot])</li> <li>Bump pymarkdownlnt from 0.9.12 to 0.9.13 #67 (dependabot[bot])</li> <li>Bump pre-commit from 3.3.3 to 3.4.0 #66 (dependabot[bot])</li> <li>Bump poethepoet from 0.22.0 to 0.22.1 #65 (dependabot[bot])</li> <li>Bump pymdown-extensions from 10.2.1 to 10.3 #64 (dependabot[bot])</li> <li>Bump gitpython from 3.1.32 to 3.1.33 #62 (dependabot[bot])</li> </ul> <p>Merged pull requests:</p> <ul> <li>[pre-commit.ci] pre-commit autoupdate #81 (pre-commit-ci[bot])</li> <li>[pre-commit.ci] pre-commit autoupdate #69 (pre-commit-ci[bot])</li> </ul>"},{"location":"changelog/#v050-2023-08-31","title":"v0.5.0 (2023-08-31)","text":"<p>Full Changelog</p> <p>Implemented enhancements:</p> <ul> <li>Ask for homepage &amp; repository if not standalone #61 (seapagan)</li> <li>update template toml and pre-commit deps #58 (seapagan)</li> <li>override config options from command line #55 (seapagan)</li> <li>check PyPI for existing packages #46 (seapagan)</li> </ul> <p>Fixed bugs:</p> <ul> <li>fix unable to create standalone app #60 (seapagan)</li> </ul> <p>Documentation:</p> <ul> <li>Update docs for latest additions #59 (seapagan)</li> </ul> <p>Dependency Updates:</p> <ul> <li>Bump mkdocs-material from 9.2.3 to 9.2.6 #57 (dependabot[bot])</li> <li>Bump pymdown-extensions from 10.1 to 10.2.1 #56 (dependabot[bot])</li> <li>Bump pymdown-extensions from 10.1 to 10.2 #54 (dependabot[bot])</li> <li>Bump mkdocs-material from 9.2.3 to 9.2.5 #53 (dependabot[bot])</li> <li>Bump pydantic from 2.1.1 to 2.3.0 #52 (dependabot[bot])</li> <li>Bump faker from 19.3.0 to 19.3.1 #51 (dependabot[bot])</li> <li>Bump mkdocs-material from 9.1.21 to 9.2.3 #50 (dependabot[bot])</li> </ul>"},{"location":"changelog/#v045-2023-08-17","title":"v0.4.5 (2023-08-17)","text":"<p>Full Changelog</p> <p>Implemented enhancements:</p> <ul> <li>work on the TODO list. See commits for details #44 (seapagan)</li> </ul> <p>Dependency Updates:</p> <ul> <li>Bump mypy from 1.5.0 to 1.5.1 #45 (dependabot[bot])</li> <li>Bump pytest-randomly from 3.14.0 to 3.15.0 #43 (dependabot[bot])</li> </ul>"},{"location":"changelog/#v044-2023-08-15","title":"v0.4.4 (2023-08-15)","text":"<p>Full Changelog</p> <p>Implemented enhancements:</p> <ul> <li>add mkdocs as an option #42 (seapagan)</li> </ul> <p>Dependency Updates:</p> <ul> <li>Bump poethepoet from 0.21.1 to 0.22.0 #41 (dependabot[bot])</li> <li>Bump pytest-randomly from 3.13.0 to 3.14.0 #40 (dependabot[bot])</li> </ul>"},{"location":"changelog/#v043-2023-08-13","title":"v0.4.3 (2023-08-13)","text":"<p>Full Changelog</p> <p>Implemented enhancements:</p> <ul> <li>Tweak linting #39 (seapagan)</li> </ul> <p>Dependency Updates:</p> <ul> <li>Bump mypy from 1.4.1 to 1.5.0 #38 (dependabot[bot])</li> </ul>"},{"location":"changelog/#v042-2023-08-10","title":"v0.4.2 (2023-08-10)","text":"<p>Full Changelog</p>"},{"location":"changelog/#v041-2023-08-10","title":"v0.4.1 (2023-08-10)","text":"<p>Full Changelog</p>"},{"location":"changelog/#v040-2023-08-10","title":"v0.4.0 (2023-08-10)","text":"<p>Full Changelog</p> <p>Implemented enhancements:</p> <ul> <li>Implement custom template additions #31 (seapagan)</li> </ul> <p>Dependency Updates:</p> <ul> <li>Bump faker from 19.2.0 to 19.3.0 #37 (dependabot[bot])</li> <li>Bump pygments from 2.15.1 to 2.16.1 #36 (dependabot[bot])</li> <li>Bump mkdocs from 1.5.1 to 1.5.2 #35 (dependabot[bot])</li> <li>Bump rich from 13.5.0 to 13.5.2 #34 (dependabot[bot])</li> <li>Bump mkdocs-minify-plugin from 0.7.0 to 0.7.1 #33 (dependabot[bot])</li> </ul>"},{"location":"changelog/#v030-2023-07-30","title":"v0.3.0 (2023-07-30)","text":"<p>Full Changelog</p> <p>Implemented enhancements:</p> <ul> <li>Add a configuration file  #30 (seapagan)</li> <li>use conditional logic in templates #24 (seapagan)</li> </ul> <p>Dependency Updates:</p> <ul> <li>Bump mkdocs-material from 9.1.19 to 9.1.21 #29 (dependabot[bot])</li> <li>Bump mkdocs from 1.4.3 to 1.5.1 #28 (dependabot[bot])</li> <li>Bump pylint from 2.17.4 to 2.17.5 #26 (dependabot[bot])</li> <li>Bump pydantic from 2.0.3 to 2.1.1 #22 (dependabot[bot])</li> </ul>"},{"location":"changelog/#v021-2023-07-26","title":"v0.2.1 (2023-07-26)","text":"<p>Full Changelog</p>"},{"location":"changelog/#v020-2023-07-26","title":"v0.2.0 (2023-07-26)","text":"<p>Full Changelog</p> <p>Implemented enhancements:</p> <ul> <li>Add a documentation site #23 (seapagan)</li> </ul> <p>Dependency Updates:</p> <ul> <li>Bump pytest-asyncio from 0.21.0 to 0.21.1 #19 (dependabot[bot])</li> <li>Bump flake8-type-checking from 2.4.0 to 2.4.1 #18 (dependabot[bot])</li> <li>Bump gitpython from 3.1.31 to 3.1.32 #17 (dependabot[bot])</li> <li>Bump pydantic from 2.0.2 to 2.0.3 #16 (dependabot[bot])</li> <li>Bump mock from 5.0.2 to 5.1.0 #15 (dependabot[bot])</li> <li>Bump faker from 18.11.2 to 19.2.0 #14 (dependabot[bot])</li> <li>Bump poethepoet from 0.20.0 to 0.21.1 #12 (dependabot[bot])</li> <li>Bump pytest-reverse from 1.6.0 to 1.7.0 #10 (dependabot[bot])</li> <li>Bump black from 23.3.0 to 23.7.0 #9 (dependabot[bot])</li> <li>Bump pytest-randomly from 3.12.0 to 3.13.0 #8 (dependabot[bot])</li> </ul> <p>Merged pull requests:</p> <ul> <li>Move licenses out of template folder #21 (seapagan)</li> <li>subclass the Rich prompt locally #20 (seapagan)</li> </ul>"},{"location":"changelog/#v010-2023-07-06","title":"v0.1.0 (2023-07-06)","text":"<p>Full Changelog</p> <p>Implemented enhancements:</p> <ul> <li>Customize or remove the Package layout #5 (seapagan)</li> </ul> <p>Dependency Updates:</p> <ul> <li>Bump pydantic from 2.0 to 2.0.2 #4 (dependabot[bot])</li> </ul> <p>Merged pull requests:</p> <ul> <li>Refactor the src template layout and logic #2 (seapagan)</li> <li>Add base app functionality #1 (seapagan)</li> </ul> <p>* This Changelog was automatically generated by github_changelog_generator</p>"},{"location":"configuration/","title":"Configuration","text":""},{"location":"configuration/#configuration-file","title":"Configuration file","text":"<p>This app needs minimal configuration, most options default to <code>True</code>. The configuration is stored in a <code>TOML</code> file in a sub-folder of the user's home directory. By default (and currently the only option) this file is stored in <code>~/.pymaker/config.toml</code>. An example of this file is:</p> <pre><code>[pymaker]\nauthor_email = \"user@server.com\"\nauthor_name = \"Python User\"\ndefault_license = \"MIT\"\ngithub_username = \"githubuser\" # optional\ngithub_token = \"ghp_1234567890abcdefghij\" # optional\ninclude_linters = true\ninclude_mkdocs = true\ninclude_testing = true\ninstall_pre_commit = true\nschema_version = \"1.0\" # for internal use, generally don't change this\ntemplate_folder = \"/home/user/.pymaker/template\"\nuse_default_template = true\nuse_git = true\n</code></pre> <p>If this file does not exist, it will be created on first run. The app will ask for the values of <code>author_name</code>, <code>author_email</code>, <code>default_license</code> and <code>github_username</code>. For <code>author_name</code> and <code>author_email</code> it will try to use the current global git user name and email if they are set as defaults, though the user can override these.</p>"},{"location":"configuration/#configuration-options","title":"Configuration options","text":"<p>The following options are available for configuring Py-Maker:</p> <ul> <li><code>author_email</code>: The email address of the author.</li> <li><code>author_name</code>: The name of the author.</li> <li><code>default_license</code>: The default license to use for the project.</li> <li><code>github_username</code>: The GitHub username of the author [optional].</li> <li><code>github_token</code>: The GitHub Personal Access Token of the author [optional]. See   below for more information.</li> <li><code>include_linters</code>: Whether to include linters in the project, defaults to   <code>true</code></li> <li><code>include_mkdocs</code>: Whether to include MkDocs in the project, defaults to   <code>true</code></li> <li><code>include_testing</code>: Whether to include testing in the project, defaults to   <code>true</code></li> <li><code>install_pre_commit</code>: Whether to install pre-commit hooks, defaults to   <code>true</code></li> <li><code>schema_version</code>: The version of the configuration schema. This should not   be modified by hand.</li> <li><code>template_folder</code>: The path to the template folder.</li> <li><code>use_default_template</code>: Whether to use the default template, defaults to   <code>true</code></li> <li><code>use_git</code>: Whether to use Git for version control, defaults to   <code>true</code></li> </ul> <p>All of the boolean options are set to <code>true</code> by default. The <code>template_folder</code> is set to the default template folder, which is <code>~/.pymaker/template</code>. The <code>schema_version</code> is for internal use, and should not be changed by the user.</p>"},{"location":"configuration/#view-configuration","title":"View configuration","text":"<p>You can list the current configuration with the command:</p> <pre><code>$ pymaker config show\n</code></pre>"},{"location":"configuration/#edit-the-configuration-file","title":"Edit the configuration file","text":"<p>You can edit the configuration file with the command:</p> <pre><code>$ pymaker config edit\n</code></pre> <p>This will open the configuration file in your default editor. Under linux it will try to use <code>xdg-open</code> to open the file, and if that fails, it will try to use a few different editors until it finds one that works. Under Windows and Mac it will try to use the default editor.</p> <p>You may also edit the configuration file manually, by default it is stored in <code>~/.pymaker/config.toml</code>.</p>"},{"location":"configuration/#set-configuration","title":"Set configuration","text":"<p>The configuration is set the first time you run the app, but you can change these defaults at any time using the command:</p> <pre><code>$ pymaker config change\n</code></pre> <p>The latter command will prompt you for the values of <code>Author name</code>, <code>Author Email</code>, <code>Default License</code> and <code>GitHub Username</code>, then update the configuration file.</p>"},{"location":"configuration/#add-a-github-personal-access-token","title":"Add a GitHub Personal Access Token","text":"<p>In future versions, this app will be able to create a new GitHub repository for you, and generate a CHANGELOG.md file. To do this, it will need a GitHub Personal Access Token. You can create a new token by going to GitHub Personal Access Tokens and clicking on the \"Generate new token\" button. Use the 'Classic' token option unless you really need more control. Unless you want to use the token on Private repositories, you can leave all the permissions unchecked. Give it a name (for your reference only) and chose an expiry date. You can choose never to expire, but this is not recommended. Once you have created the token, copy it (it will only be shown once, so make sure you copy it now). Then run the command:</p> <pre><code>$ pymaker config token\n</code></pre> <p>This will accept the token and store it in the configuration file. You can change the token at any time by running the same command again.</p> <p>NEVER PUSH THE CONFIG FILE TO A REPOSITORY!!!</p> <p>This shouldnt ever happen since the file is stored in the user's home directory, but it is worth mentioning. If you didn't choose any extra permissions, then the worst that can happen is that someone can use your token to create a new repository. This token is READ-ONLY, so it can't be used to do anything malicious, but it is still a good idea to keep it secret.</p>"},{"location":"configuration/#manually-editing-the-configuration-file","title":"Manually editing the configuration file","text":"<p>The configuration file is stored in TOML format, and can be edited manually if you wish. The file is stored in <code>~/.pymaker/config.toml</code> by default. The configuration file is created on first run, so if you have not run the app yet, you will need to create the file manually.</p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#contributing-to-py-maker","title":"Contributing to Py-Maker","text":"<p>Thank you for your interest in contributing to Py-Maker! We welcome all contributions, big or small.</p> <p>If you are not sure where to start, please take a look at the open issues. If you have an idea for a new feature or would like to report a bug, please open a new issue.</p> <p>We also welcome contributions to the documentation. If you find any errors or would like to suggest improvements, please open a new issue or submit a pull</p>"},{"location":"contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Since this is a Python project, you will need to have Python installed on your machine. You can download the latest version of Python from the official website or using your Operating system's package manager.</p> </li> <li> <p>I'd recommend using pyenv to manage your Python installations, the pyenv-installer works for Linux and Mac OS X. For Windows, you can use the pyenv-win port. See here for installation instructions.</p> </li> <li> <p>This project requires Python 3.9 or higher.</p> </li> <li> <p>We also use Poetry to manage our dependencies. You should have this installed as well. You can install Poetry by following the instructions on the Poetry website.</p> </li> </ul>"},{"location":"contributing/#getting-started","title":"Getting Started","text":"<p>Before you start contributing, please make sure you have read and understood our Code of Conduct and License.</p> <p>To get started, follow these steps:</p> <ol> <li>Fork the repository and clone it to your local machine.</li> <li>Install the required dependencies (see next section).</li> <li>Create a new branch for your changes: <code>git checkout -b my-new-feature</code>.</li> <li>Make your changes and commit them: <code>git commit -am 'Add some feature'</code>.</li> <li>Push your changes to your fork: <code>git push origin my-new-feature</code>.</li> <li>Create a new pull request.</li> </ol>"},{"location":"contributing/#install-dependencies","title":"Install Dependencies","text":"<p>Run the following command to install the required dependencies:</p> <pre><code>$ poetry install\n</code></pre> <p>You then need to activate the virtual environment:</p> <pre><code>$ poetry shell\n</code></pre> <p>From here you can start working on the project. If you are using an IDE such as VSCode or PyCharm, you can set the use their Python interpreter setting to use the virtual environment that has just been created.</p>"},{"location":"contributing/#install-git-pre-commit-hooks","title":"Install Git Pre-Commit hooks","text":"<p>Please do this if you are intending to submit a PR. It will check commits locally before they are pushed up to the Repo.</p> <pre><code>$ pre-commit install\npre-commit installed at .git/hooks/pre-commit\n</code></pre> <p>This will ensure that all code meets the required linting standard before being committed.</p>"},{"location":"contributing/#run-pre-commit-manually","title":"Run pre-commit manually","text":"<p>You can run these checks manually on all staged files using the below command :</p> <pre><code>poe pre\n</code></pre>"},{"location":"contributing/#testing","title":"Testing","text":"<p>We are using pytest for testing.</p> <p>At the moment the test framework is set up but we only have minimal tests. We will be adding more tests as we go along - and most definitely welcome any contributions to this area!</p> <p>If you add any new features, please add tests for them. This will help us to ensure that the code is working as expected and will prevent any regressions. Currently we are not enforcing this until we have better coverage of the code.</p>"},{"location":"contributing/#changelog","title":"Changelog","text":"<p>The changelog is automatically generated, so please do not edit it manually.</p> <p>For information, it is generated using a Ruby gem called GitHub Changelog Generator. There is a POE task that will run this and update the changelog file.</p> <pre><code>$ poe changelog\n</code></pre> <p>you also need to add a GitHub Personal Access Token to the config file. See the section in the Documentation for information.</p> <p>However, you should NOT include a change to the <code>CHANGELOG.md</code> file in your Pull Requests. This will be handled by the maintainers when a new release is made.</p>"},{"location":"contributing/#guidelines","title":"Guidelines","text":"<p>Here are some guidelines to follow when contributing to Py-Maker:</p> <ul> <li>Follow the PEP 8 style guide. The   pre-commit hooks will check for this. Black   is installed and this is the format we are using.</li> <li>Try to have no linting errors or warnings. The pre-commit hooks will check for   this also. Flake8 is installed and   there are a few other linters that are run as well.</li> <li>MyPy is installed and we are using   type hints. Please try to add type hints to your code. If you see any areas of   the code that are missing type hints, please feel free to open a PR and add   them \ud83d\ude01!</li> <li>Write clear and concise commit messages.</li> <li>Write tests for your code.</li> <li>Make sure your code passes all tests before submitting a pull request.</li> <li>Document your code using   docstrings.</li> <li>Use GitHub issues to report   bugs or suggest new features.</li> </ul> <p>If you are using VSCode, there is a config file in the <code>.vscode</code> folder that will help you to follow these guidelines. You may need to install some extensions to get the most out of it. I'll add a list of recommended extensions here soon. The <code>Python</code> one is a must though.</p>"},{"location":"contributing/#contact","title":"Contact","text":"<p>If you have any questions or need help with contributing, please contact me @seapagan on GitHub. You can also use the GitHub Discussions feature.</p> <p>Happy contributing!</p>"},{"location":"future-plans/","title":"Future Plans","text":""},{"location":"future-plans/#future-plans","title":"Future Plans","text":"<p>The below is a list of things I'd like to add to the project in the future, and is kinda a 'work list' for me.</p> <p>Everything below will be implemented and are in no particular order or importance.</p>"},{"location":"future-plans/#general","title":"General","text":"<ul> <li>Add a flag to overwrite existing files if the directory exists. Make this   require confirmation. Alternately allow overwrite with confirmation if an   existing/populated directory is found. Add a force flag to skip confirmation.   <code>I think DO NOT allow this when '.' is specified as this could be disastrous</code>.</li> <li>Add cmd line options to specify the project name, author, etc. so the user   doesn't have to enter them manually. <code>Not sure if this is needed once we add   the CLI parameters to the config file. May be useful for automation though</code>.</li> <li>Add a command to the CLI template command to show the template files as a   tree, marking whether each file/folder is from the internal templates or the   user's templates.</li> <li>Implement a 'plugin' functionality where we can specify modified/extra files   to be added to the generated project. This would also add a command line flag   (ie <code>--django</code>, <code>--pydantic</code> or <code>--fastapi</code> or whatever) to use that plugin,   and a config setting to specify using this plugin always. Plugins could be   built-in (provided with the package) or user-defined (in the user's   <code>/pymaker/plugins</code> folder or installable via pip). Have a config setting to   specify which plugins are enabled.</li> <li>Include an optional <code>vscode</code> settings file in the generated project, optimized   for python projects. This could include recommended extensions.</li> <li>Perhaps add AUTHORS.md skeleton.</li> <li>Add template GitHub workflows for CI/CD, testing, etc. CodeQL or is that too   much (I do use it in most of my repos)?</li> <li>Add a default dockerfile? Maybe a docker-compose file as well- Both for this   project and for the generated projects?</li> <li>Add the <code>actions/stale</code> action to the generated project.</li> <li>Automatically create the new GitHub repository from the CLI. This would   require the GitHub API key to be in the config file. The package   <code>PyGithub</code> would probably be useful   for this.</li> <li>Update the <code>config</code> CLI command to enable setting/flipping individual config   settings from the command line.</li> </ul>"},{"location":"future-plans/#back-burner","title":"Back Burner","text":"<p>These are ideas that I may or may not implement. They are here for reference.</p> <ul> <li>Modify boolean settings in the config to have the values 'yes', 'no' or 'ask'?   This will be a bit lower priority and not sure if it's worth it.</li> <li>Add some form of 'extra packages' command line option and config setting to   automatically add extra packages to the generated <code>pyproject.toml</code> file.</li> <li>Take a look at the release-drafter GitHub action and see if worth using.</li> </ul>"},{"location":"future-plans/#code-quality","title":"Code Quality","text":"<ul> <li>Refactor the <code>PyMaker</code> class as its getting a bit messy. Maybe split it into   multiple classes with specific responsibilities.</li> <li>Sort out the nested <code>if/else</code> statements in   <code>PyMaker.get_sanitized_package_name</code>.</li> </ul>"},{"location":"future-plans/#documentation","title":"Documentation","text":"<ul> <li>Add usage examples and perhaps a walk-through to the documentation. Maybe   with a YouTube video?</li> </ul>"},{"location":"future-plans/#testing","title":"Testing","text":"<ul> <li>Add testing with Pytest (<code>IN PROGRESS</code>)</li> </ul>"},{"location":"installation/","title":"Installation","text":"<p>It is best to install this package globally, rather than in a virtual environment, as it is intended to be used to create new projects. Since we are using Poetry to manage the dependencies, a virtual environment will be created for you anyway specific to each project you are creating.</p>"},{"location":"installation/#release-version","title":"Release Version","text":"<p>Install the package globally using pip:</p> <pre><code>$ pip install pyproject-maker\n</code></pre> <p>If you cannot install globally due to permissions, you can install it to your user install directory:</p> <pre><code>$ pip install --user pyproject-maker\n</code></pre> <p>or use pipx (recommended method)</p> <pre><code>$ pipx install pyproject-maker\n</code></pre>"},{"location":"installation/#bleeding-edge-version","title":"Bleeding Edge Version","text":"<p>It is possible to install the latest development version of the package directly from the repository. In most cases this should be safe to do, but it is possible that the development version may not be stable or have bugs. If you are having issues with the development version, please open an issue on the repository.</p> <p>Use pipx (recommended method):</p> <pre><code>$ pipx install git+https://github.com/seapagan/py-maker\n</code></pre> <p>Using pip:</p> <pre><code>$ pip install git+https://github.com/seapagan/py-maker\n</code></pre> <p>You can also use the <code>--user</code> flag for <code>pip</code> if you do not have permissions to install globally. This is NOT needed for <code>pipx</code>.</p> <p>Lastly, you can clone the repository and install from the local copy:</p> <pre><code>$ git clone https://github.com/seapagan/py-maker\n$ cd py-maker\n$ pip install .\n</code></pre>"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2023 Grant Ramsay</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"tasks/","title":"Task Runner","text":"<p>The task-runner Poe the Poet is installed in the new project as a development dependency which allows us to run simple tasks (similar to npm <code>scripts</code>).</p> <p>These are run (from within the virtual environment) using the <code>poe</code> command and then the script name, for example:</p> <pre><code>$ poe pre\n</code></pre> <p>To get a list of all available tasks with a description, run:</p> <pre><code>$ poe\n</code></pre> <p>You can define your own, but there are 8 specific ones provided with the script.</p> <ul> <li><code>pre</code> : Run <code>pre-commit run --all-files</code></li> <li><code>pylint</code>: Run Pylint on all Python files in the project.</li> <li><code>mypy</code> : Run MyPy type-checker on all Python files in the project.</li> <li><code>flake8</code> : Run Flake8 linter on all Python files in the project.</li> <li><code>black</code> : Run Black code formatter on all Python files in the project.</li> <li><code>try</code> : Run Tryceratops linter on all Python files in the project.</li> <li> <p><code>markdown</code> : Run pymarkdown on all markdown files in the project.</p> </li> <li> <p><code>lint</code> = Runs black, flake8, mypy, try, and pylint in sequence</p> </li> </ul> <p>If you selected to install MkDocs with this project, then there are some extra tasks to help with that:</p> <ul> <li><code>docs:publish</code> : Deploy the documentation to GitHub pages.</li> <li><code>docs:build</code> : Build the documentation locally.</li> <li><code>docs:serve</code> : Serve the documentation locally. Useful during development.</li> <li><code>docs:serve:all</code> : As above, but allows access from other devices on the   network.</li> </ul> <p>These are defined in the <code>pyproject.toml</code> file in the <code>[tool.poe.tasks]</code> section. Take a look at this file if you want to add or remove tasks.</p>"},{"location":"usage/","title":"Using PyMaker","text":""},{"location":"usage/#create-a-new-project","title":"Create a new project","text":"<p>To create a new project, run the following command:</p> <pre><code>$ pymaker new &lt;project-folder&gt;\n</code></pre> <p>This will create a new directory with the name you provide.</p> <p>You can create a new project in the current directory by using <code>.</code> as the project folder name. This must be an empty directory:</p> <pre><code>$ mkdir test-project\n$ cd test-project\n$ pymaker new .\n</code></pre> <p>The App will then run the steps needed to get you started quickly:</p> <ol> <li>Copy the template files into the new directory</li> <li>Initialise a git repository</li> <li>Commit the boilerplate to Git</li> </ol> <p>You will be asked a series of questions to customise the new project.</p>"},{"location":"usage/#choose-a-package-name-and-description","title":"Choose a package name and description","text":"<p>When it asks \"Package Name?\" you can choose two variants :</p> <ol> <li>If you are creating a standard Python package that can optionally be    uploaded to PyPI, enter a package name here. Note that underscores (\"_\")    must be used as opposed to dashes (\"-\") to comply with Python package naming    rules. Default is the project folder name with underscores replacing dashes,    spaces or dots.</li> <li>For a stand-alone tool that will not be uploaded to PyPI, or is not a    library, enter '-' for the package name. In this case the <code>main.py</code> will just    be placed in the project root and no package folder will be created or    referenced. You can also specify <code>--standalone</code> on the command line to skip     this question.</li> </ol> <p>For option 1 above, the App will check if the package name is available on PyPI or if it has already been used. In the latter case, you will be asked to choose another name.</p>"},{"location":"usage/#command-line-options","title":"Command line options","text":"<p>There are a few command line options that can be used to customise the build. Command line options override any settings in the config file.</p> <p>For example, if <code>use_git = false</code> is set in the config file, then passing <code>--git</code> on the command line will override this and initialise a Git repository.</p>"},{"location":"usage/#-y-or-yes","title":"<code>-y</code> or <code>--yes</code>","text":"<p>Accept all defaults and do not ask any questions.</p>"},{"location":"usage/#-git-no-git","title":"<code>--git</code> / <code>--no-git</code>","text":"<p>Initialise a Git repository. Default is <code>True</code> unless <code>use_git = false</code> is set in the config file or <code>--no-git</code> is passed on the command line.</p>"},{"location":"usage/#-test-no-test","title":"<code>--test</code> / <code>--no-test</code>","text":"<p>Create a test directory and add the <code>pytest</code> dependency plus a few related plugins to the <code>pyproject.toml</code> file. Default is <code>True</code> unless <code>include_testing = false</code> is set in the config file or <code>--no-test</code> is passed on the command line.</p>"},{"location":"usage/#-lint-no-lint","title":"<code>--lint</code> / <code>--no-lint</code>","text":"<p>Add linting dependencies and configuration to the <code>pyproject.toml</code> file. Default is <code>True</code> unless <code>include_linters = false</code> is set in the config file or <code>--no-lint</code> is passed on the command line.</p>"},{"location":"usage/#-docs-no-docs","title":"<code>--docs</code> / <code>--no-docs</code>","text":"<p>Add MkDocs and some plugins to the <code>pyproject.toml</code> file. Default is <code>True</code> unless <code>include_mkdocs = false</code> is set in the config file or <code>--no-docs</code> is passed on the command line.</p> <p>If you choose to run <code>poetry</code> automatically, this will also add a customized <code>mkdocs.yml</code> file and create a new default MkDocs site in the <code>docs</code> folder. Some useful plugins are also installed and added to the <code>mkdocs.yml</code> file.</p>"},{"location":"usage/#-standalone","title":"<code>--standalone</code>","text":"<p>Generate a stand-alone script instead of a package. This will place the <code>main.py</code> file in the project root and not create a package folder. This is useful for creating a single script that can be run from the command line. this is equivalent to entering <code>-</code> for the package name.</p>"},{"location":"usage/#-bare","title":"<code>--bare</code>","text":"<p>Generate a project without Testing, linting or documentation libraries and configurations. It will also NOT initialise a Git repository. Currently there is no config file option to do this automatically, you must use the command line option.</p>"},{"location":"usage/#run-poetry-install-automatically","title":"Run <code>poetry install</code> automatically","text":"<p>You will be asked if you want to run <code>poetry install</code> automatically. This will create a virtual environment and install the dependencies, plus also create a bare <code>MkDocs</code> site and configuration. This is the recommended option.</p> <p>You will still need to run <code>poetry shell</code> to activate the virtual environment from inside the new project folder.</p>"},{"location":"usage/#start-developing","title":"Start developing","text":"<p>You should now change into the new directory, install dependencies and activate the virtual environment:</p> <pre><code>$ cd &lt;project-folder&gt;\n$ poetry install # if not done automatically already\n$ poetry shell\n</code></pre> <p>Now, you can start developing </p>"},{"location":"usage/#example-run","title":"Example run","text":"<pre><code>$ pymaker new secret-docs\nPyMaker - Generate a Python project skeleton.\n\nCreating a new project at /home/bathroom/secret-docs\n\nName of the Application? (Secret Docs):\nPackage Name? (Use '-' for standalone script) (secret_docs):\nDescription of the Application?: Store all the Bigly amount of secret documents\nI have in the bathroom\n\nAuthor Name? (): Orange Tango\nAuthor Email? (): bigly@spraytan.org\nApplication License? [None/Apache2/BSD3/BSD2/GPL2/GPL3/LGPL/MIT/MPL2/CDDL/EPL2] (MIT):\n\nCreating a New Python app with the below settings :\n\n    Description : Store all the Bigly amount of secret documents I have in the\n                  bathroom\n   Package Name : secret_docs\n         Author : Orange Tango\n          Email : bigly@straytan.org\n        License : MIT\n    Project Dir : /home/bathroom/secret-docs\n           Name : Secret Docs\n     Standalone : False\n\nIs this correct? [y/n] (y):\n\n--&gt; Creating project folder ... Done\n\nShould I Run 'poetry install' now? [y/n] (y):\nCreating virtualenv secret-docs in /home/bathroom/secret-docs/.venv\nUpdating dependencies\nResolving dependencies... (11.6s)\n\nPackage operations: 103 installs, 1 update, 0 removals\n\n  \u2022 Installing lazy-object-proxy (1.9.0)\n  \u2022 Installing six (1.16.0)\n\n            &lt;snippy snip&gt;\n\n  \u2022 Installing pytest-xdist (3.3.1)\n  \u2022 Installing tryceratops (2.3.2)\n\nWriting lock file\n\nInstalling the current project: secret-docs (0.1.0)\n\n--&gt; Creating MkDocs project\nINFO    -  Writing config file: ./mkdocs.yml\nINFO    -  Writing initial docs: ./docs/index.md\n\n--&gt; Creating Git repository ... Done\n\n--&gt; Project created successfully.\n\nNext steps:\n\n1. Change to the project directory:\n2. Install the dependencies if not done above (creates a virtual environment):\n  $ poetry install\n3. Activate the virtual environment:\n  $ poetry shell\n4. Run the application:\n  $ secret-docs\n5. Code!\n\nSee the README.md file for more information.\n</code></pre>"},{"location":"template/internal/","title":"The Internal Template","text":"<p>By default, the generated application will have a basic template that you can use to get started, this template is stored inside the package itself. It will contain all you need to get started, including a basic <code>README.md</code> file.</p> <p>The dependency management is handled by Poetry, and we include a <code>pyproject.toml</code> file with several useful dependencies:</p> <ul> <li>PyTest   for testing, along with several useful plugins.</li> <li>The Black   code formatter.</li> <li>The Flake8 linter,   along with a good selection of plugins. It is also set up to use the   <code>pyproject.toml</code> for it's configuration, and to work nicely with Black.</li> <li>Pylint and   Pydocstyle   linters.</li> <li>MyPy for static   type checking.</li> <li>Isort for sorting   imports.</li> <li>pre-commit for running checks   before committing code.</li> </ul> <p>It also contains several tasks for running the tests, linting, formatting and more. These use the Poe The Poet Poetry extension see Task Runner for more information.</p>"},{"location":"template/modify/","title":"Adding or Modifying files in the template","text":"<p>If you wish to add or change specific files in the template, you can do so by adding them to the <code>~/.pymaker/template</code> folder. The files (and folders) in this folder will be copied to the root of the project when the template is generated.</p> <p>Files in this global template folder will override any files in the default template, so you can for example change the <code>README.md</code> file, add to the <code>.gitignore</code> or even add a complete extra folder structure.</p> <p>If you want to do a major change to the template, you can actually dump the default template to this folder and modify or delete files as you see fit. See the next section for more information on how to do this.</p>"},{"location":"template/replace/","title":"Replacing the Default Template","text":""},{"location":"template/replace/#dump-the-default-template","title":"Dump the Default Template","text":"<p>Should you wish to heavily modify the default template, or even replace it completely, you can do so by dumping the default template to the <code>~/.pymaker/template</code> folder. This will copy all files from the default template to the global template folder, where you can modify or delete them as you see fit.</p> <p>To do this, run the following command:</p> <pre><code>$ pymaker template dump\n</code></pre> <p>This will copy the default template to the global template folder (<code>~/.pymaker/template</code>). You can then modify or delete files as you see fit.</p> <p>Running this command will ask you if you wish to set this exported template as the default template. It will then ask you if you want to disable the internal template. If you answer yes, then the internal template will be disabled, and ONLY the exported template will be used instead. Otherwise, both will still be used with the exported template taking precedence.</p>"},{"location":"template/replace/#change-the-location-of-the-template-folder","title":"Change the location of the Template folder","text":"<p>If you wish to change the location of the template folder, you can do so in 2 ways:</p> <ol> <li>By adding the <code>--local</code> flag to the above command (e.g. <code>pymaker template    dump --local</code>). This will dump the default template to the current folder,     giving you the option to disable the default template if needed. Note that     any files in the folder will be overwritten.</li> <li>By changing to the folder containing your template and running <code>pymaker    template set</code>. This will set the current folder as the template folder and    give you the same option to disable the default template.</li> </ol> <p>You can reset the template location back to the default <code>~/.pymaker/template</code> folder by running the following command:</p> <pre><code>$ pymaker template reset\n</code></pre>"},{"location":"template/replace/#choose-to-use-the-default-template-or-not","title":"Choose to use the Default Template or not","text":"<p>Running the <code>dump</code> command will give you the option to disable the default template completely and ONLY use the exported (or custom) template. You can also do this (or revert back to the default template) by running the following command:</p> <pre><code>$ pymaker template default &lt;enable|disable&gt;\n</code></pre> <p><code>enable</code> will enable the default template, and <code>disable</code> will disable it. Please note that any custom templates you have created will be used regardless, and will overwrite the default template (if enabled) if they have the same file name.</p>"}]}